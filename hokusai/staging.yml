apiVersion: apps/v1
kind: Deployment
metadata:
  name: positron-web
  namespace: default
  labels:
    app: positron
    component: web
    layer: application
    app.kubernetes.io/version: staging
spec:
  selector:
    matchLabels:
      app: positron
      component: web
      layer: application
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: positron
        component: web
        layer: application
        app.kubernetes.io/version: staging
      name: positron-web
    spec:
      initContainers:
      - name: setenv
        image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/fortress:staging
        imagePullPolicy: Always
        command:
        - python
        - src/load/load.py
        - kubernetes
        - staging
        - positron
        envFrom:
        - configMapRef:
            name: secrets-config
        volumeMounts:
        - name: secrets
          mountPath: /secrets
      containers:
      - name: positron-web
        args:
        - yarn
        - production
        envFrom:
        - configMapRef:
            name: secrets-config
        - configMapRef:
            name: positron-environment
        volumeMounts:
        - name: secrets
          mountPath: /secrets
          readOnly: true
        env:
        - name: PORT
          value: '8080'
        - name: DATADOG_AGENT_HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_OPTIONS
          value: "--max_old_space_size=256 --openssl-legacy-provider --no-experimental-fetch"
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['app.kubernetes.io/version']
        image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/positron:staging
        imagePullPolicy: Always
        ports:
        - name: positron-http
          containerPort: 8080
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            memory: 512Mi
        readinessProbe:
          httpGet:
            port: positron-http
            path: /api/health
            httpHeaders:
            - name: X-FORWARDED-PROTO
              value: https
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec:
              command:
              - sh
              - -c
              - sleep 5
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
        - name: ndots
          value: '1'
      serviceAccountName: positron
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: tier
                operator: In
                values:
                - foreground
      volumes:
      - name: secrets
        emptyDir: {}

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: positron-web
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: positron-web
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 70
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: positron-scheduled-posts-cron
spec:
  schedule: '*/10 * * * *'
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        metadata:
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
        spec:
          initContainers:
          - name: setenv
            image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/fortress:staging
            imagePullPolicy: Always
            command:
            - python
            - src/load/load.py
            - kubernetes
            - staging
            - positron
            envFrom:
            - configMapRef:
                name: secrets-config
            volumeMounts:
            - name: secrets
              mountPath: /secrets
          containers:
          - name: positron-scheduled-posts-cron
            image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/positron:staging
            args:
            - yarn
            - task
            - scripts/scheduled_posts.js
            imagePullPolicy: Always
            envFrom:
            - configMapRef:
                name: positron-environment
            - configMapRef:
                name: secrets-config
            volumeMounts:
            - name: secrets
              mountPath: /secrets
              readOnly: true
          restartPolicy: Never
          serviceAccountName: positron
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: tier
                    operator: In
                    values:
                    - background
          volumes:
          - name: secrets
            emptyDir: {}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: positron-unqueue-cron
spec:
  schedule: 0 15 * * *
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 3
      template:
        metadata:
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: 'false'
        spec:
          initContainers:
          - name: setenv
            image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/fortress:staging
            imagePullPolicy: Always
            command:
            - python
            - src/load/load.py
            - kubernetes
            - staging
            - positron
            envFrom:
            - configMapRef:
                name: secrets-config
            volumeMounts:
            - name: secrets
              mountPath: /secrets
          containers:
          - name: positron-unqueue-cron
            image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/positron:staging
            args:
            - yarn
            - task
            - scripts/unqueue.js
            imagePullPolicy: Always
            envFrom:
            - configMapRef:
                name: positron-environment
            - configMapRef:
                name: secrets-config
            volumeMounts:
            - name: secrets
              mountPath: /secrets
              readOnly: true
          restartPolicy: Never
          serviceAccountName: positron
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: tier
                    operator: In
                    values:
                    - background
          volumes:
          - name: secrets
            emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: positron
    component: web
    layer: application
  name: positron-web-internal
  namespace: default
spec:
  ports:
  - port: 8080
    protocol: TCP
    name: http
    targetPort: positron-http
  selector:
    app: positron
    layer: application
    component: web
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: positron
  annotations:
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ externalIngressAllowSourceIP|join(',') }}
spec:
  ingressClassName: nginx
  rules:
  - host: stagingwriter.artsy.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: positron-web-internal
            port:
              name: http

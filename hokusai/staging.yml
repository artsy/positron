apiVersion: apps/v1
kind: Deployment
metadata:
  name: positron-web
  namespace: default
  labels:
    app: positron
    component: web
    layer: application
spec:
  selector:
    matchLabels:
      app: positron
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: positron
        component: web
        layer: application
      name: positron-web
    spec:
      containers:
        - name: positron-web
          args: ["yarn", "production"]
          envFrom:
            - configMapRef:
                name: positron-environment
          env:
            - name: PORT
              value: "8080"
            - name: "DATADOG_AGENT_HOSTNAME"
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/positron:staging
          imagePullPolicy: Always
          ports:
            - name: positron-http
              containerPort: 8080
          resources:
            requests:
              cpu: 500m
              memory: 768Mi
            limits:
              memory: 1Gi
          readinessProbe:
            httpGet:
              port: positron-http
              path: /api/health
              httpHeaders:
                - name: X-FORWARDED-PROTO
                  value: https
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 10"]
        - name: positron-nginx
          image: artsy/docker-nginx:1.14.2
          ports:
            - name: nginx-http
              containerPort: 80
            - name: nginx-https
              containerPort: 443
          readinessProbe:
            tcpSocket:
              port: nginx-http
            initialDelaySeconds: 5
            periodSeconds: 15
            timeoutSeconds: 10
          lifecycle:
            preStop:
              exec:
                command: ["sh", "-c", "sleep 5 && /usr/sbin/nginx -s quit"]
          env:
            - name: "NGINX_DEFAULT_CONF"
              valueFrom:
                configMapKeyRef:
                  name: nginx-config
                  key: default-websockets
          volumeMounts:
            - name: nginx-secrets
              mountPath: /etc/nginx/ssl
      volumes:
        - name: nginx-secrets
          secret:
            secretName: nginx-secrets
            defaultMode: 420
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: tier
                    operator: In
                    values:
                      - foreground

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: positron-web
  namespace: default
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: positron-web
  minReplicas: 1
  maxReplicas: 2
  targetCPUUtilizationPercentage: 70

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: positron
    component: web
    layer: application
  name: positron-web
  namespace: default
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: {{ artsyNetWildcardSSLCert }}
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-draining-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "300"
spec:
  ports:
    - port: 80
      protocol: TCP
      name: http
      targetPort: nginx-http
    - port: 443
      protocol: TCP
      name: https
      targetPort: nginx-https
  selector:
    app: positron
    layer: application
    component: web
  sessionAffinity: None
  type: LoadBalancer

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: positron-scheduled-posts-cron
spec:
  schedule: "*/10 * * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: positron-scheduled-posts-cron
              image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/positron:staging
              command: ["yarn", "task", "scripts/scheduled_posts.js"]
              imagePullPolicy: Always
              envFrom:
                - configMapRef:
                    name: positron-environment
          restartPolicy: Never
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  preference:
                    matchExpressions:
                      - key: tier
                        operator: In
                        values:
                          - background

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: positron-unqueue-cron
spec:
  schedule: "0 15 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: positron-unqueue-cron
              image: 585031190124.dkr.ecr.us-east-1.amazonaws.com/positron:staging
              command: ["yarn", "task", "scripts/unqueue.js"]
              imagePullPolicy: Always
              envFrom:
                - configMapRef:
                    name: positron-environment
          restartPolicy: Never
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  preference:
                    matchExpressions:
                      - key: tier
                        operator: In
                        values:
                          - background

---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: positron-data-import
spec:
  schedule: "0 4 * * *"
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: positron-data-import-cron
              image: artsy/mongo-data-sync
              imagePullPolicy: Always
              env:
                - name: APP_NAME
                  value: "positron"
              envFrom:
                - configMapRef:
                    name: positron-environment
              args: ["sh", "./import-db.sh", "production"]
          restartPolicy: Never
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
                - weight: 1
                  preference:
                    matchExpressions:
                      - key: tier
                        operator: In
                        values:
                          - background
